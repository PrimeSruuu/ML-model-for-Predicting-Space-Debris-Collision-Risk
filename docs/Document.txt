# Space Debris Visualization - Project Setup and 3D Earth Integration

## **Step 0.1: Setting Up the Development Environment**

### **Objective:**
Before coding, we set up a proper environment, including necessary tools, a project folder, and version control with Git.

### **1. Installed Required Software:**
- **VS Code** (Code editor) - [Download](https://code.visualstudio.com/)
- **Git** (Version control) - [Download](https://git-scm.com/downloads)
- **Node.js** (For running local servers) - [Download](https://nodejs.org/)
- **Google Chrome/Firefox** (Web browser for testing)

### **2. Created Project Folder:**
1. Open **VS Code**.
2. Create a new folder: `space-debris-visualization`
3. Open the folder in VS Code.

### **3. Initialized Git:**
```sh
cd path/to/space-debris-visualization
git init
```
Created `.gitignore` file with:
```
node_modules/
.env
.DS_Store
```

### **4. Created Basic Project Structure:**
```
space-debris-visualization/
│── src/                    # Source code
│   ├── index.html          # Main HTML file
│   ├── styles.css          # CSS file
│   ├── main.js             # JavaScript file
│── assets/                 # Images/resources
│── docs/                   # Documentation
│── .gitignore              # Git ignore file
│── README.md               # Project documentation
```
Created the files using:
```sh
mkdir src assets docs
cd src
touch index.html styles.css main.js
cd ..
touch .gitignore README.md
```

### **5. First Git Commit:**
```sh
git add .
git commit -m "Initial project setup"
```

---

## **Step 0.2: Integrating CesiumJS and Creating the 3D Earth Model**

### **Objective:**
- Add **CesiumJS**.
- Display **3D Earth** (without Cesium’s default timeline, credits, or UI elements).
- Enable smooth navigation (zoom, pan, rotate).

### **1. Obtained a CesiumJS API Token:**
- Signed up at **[Cesium ion](https://cesium.com/ion/)**.
- Created an API token from the **Access Tokens** section.

### **2. Integrated CesiumJS:**
Added in `src/index.html`:
```html
<script src="https://cesium.com/downloads/cesiumjs/releases/1.114/Build/Cesium/Cesium.js"></script>
<link rel="stylesheet" href="https://cesium.com/downloads/cesiumjs/releases/1.114/Build/Cesium/Widgets/widgets.css">
```

### **3. Created Basic HTML Structure:**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Space Debris Visualization</title>
    <script src="https://cesium.com/downloads/cesiumjs/releases/1.114/Build/Cesium/Cesium.js"></script>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="cesiumContainer"></div>
    <script src="main.js"></script>
</body>
</html>
```

### **4. Styled the 3D Earth Container:**
Added in `src/styles.css`:
```css
html, body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    background-color: black;
}

#cesiumContainer {
    width: 100%;
    height: 100vh;
}
```

### **5. Initialized Cesium and Removed Extra UI Elements:**
Added in `src/main.js`:
```js
// Replace 'YOUR_CESIUM_ION_TOKEN' with actual token
Cesium.Ion.defaultAccessToken = 'YOUR_CESIUM_ION_TOKEN';

const viewer = new Cesium.Viewer('cesiumContainer', {
    animation: false,
    timeline: false,
    fullscreenButton: false,
    sceneModePicker: false,
    baseLayerPicker: false,
    homeButton: false,
    geocoder: false,
    navigationHelpButton: false,
    infoBox: false,
    selectionIndicator: false
});

viewer.scene.globe.baseColor = Cesium.Color.BLACK;
viewer.cesiumWidget.creditContainer.style.display = "none";

// Set initial camera position
viewer.camera.setView({
    destination: Cesium.Cartesian3.fromDegrees(0, 0, 20000000)
});
```

### **6. Tested the Setup:**
1. Opened VS Code terminal.
2. Started a local server:
   ```sh
   npx serve src
   ```
3. Opened browser at **`http://localhost:3000`**.
4. Verified **3D Earth rendering correctly**.

### **7. Git Commit:**
```sh
git add .
git commit -m "Added CesiumJS 3D Earth"
```

---

## **Next Steps:**
✅ **3D Earth is fully integrated.**
⏭️ Next in **Step 0.3**, we will **fetch real-time space debris & satellite data** from CelesTrak and integrate it into our visualization.

